@inproceedings{10.1145/2818000.2818041,
author = {Mutti, Simone and Bacis, Enrico and Paraboschi, Stefano},
title = {SeSQLite: Security Enhanced SQLite: Mandatory Access Control for Android Databases},
year = {2015},
isbn = {9781450336826},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2818000.2818041},
doi = {10.1145/2818000.2818041},
abstract = {SQLite is the most widely deployed in-process library that implements a SQL database engine. It offers high storage efficiency, fast query operation and small memory needs. Due to the fact that a complete SQLite database is stored in a single cross-platform disk file and SQLite does not support multiple users, anyone who has direct access to the file can read the whole database content. SELinux was originally developed as a Mandatory Access Control (MAC) mechanism for Linux to demonstrate how to overcome DAC limitations. However, SELinux provides per-file protection, thus the database file is treated as an atomic unit, impeding the definition of a fine-grained mandatory access control (MAC) policy for database objects.We introduce SeSQLite, an SQLite extension that integrates SELinux access controls into SQLite with minimal performance and storage overhead. SeSQLite implements labeling and access control at both schema level (for tables and columns) and row level. This permits the management of a fine-grained access policy for database objects. A prototype has been implemented and it has been used to improve the security of Android Content Providers.},
booktitle = {Proceedings of the 31st Annual Computer Security Applications Conference},
pages = {411â€“420},
numpages = {10},
keywords = {Android, Mandatory Access Control, Database security},
location = {Los Angeles, CA, USA},
series = {ACSAC 2015}
}